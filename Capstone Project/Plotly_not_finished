# Import required libraries
import pandas as pd
import dash
from dash import html
from dash import dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

# Create a dash application
app = dash.Dash(__name__)

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # TASK 1: Add a dropdown list to enable Launch Site selection
                                # The default select value is for ALL sites
                                #dcc.Dropdown(id='site-dropdown',...)
                                html.Div([dcc.Dropdown(
                                id='site-dropdown',
                                options=[
                                    {'label':'All Sites','value':'ALL'},
                                    {'label':spacex_df["Launch Site"].unique()[0],'value':spacex_df["Launch Site"].unique()[0]},
                                    {'label':spacex_df["Launch Site"].unique()[1],'value':spacex_df["Launch Site"].unique()[1]},
                                    {'label':spacex_df["Launch Site"].unique()[2],'value':spacex_df["Launch Site"].unique()[2]},
                                    {'label':spacex_df["Launch Site"].unique()[3],'value':spacex_df["Launch Site"].unique()[3]},
                                ],
                                value='ALL',
                                placeholder="Select Launch Site",
                                searchable=True),
                                html.Br(),
                                ]),
                                
                                

                                # TASK 2: Add a pie chart to show the total successful launches count for all sites
                                # If a specific launch site was selected, show the Success vs. Failed counts for the site
                                html.Div([html.Div(dcc.Graph(id='success-pie-chart')),
                                html.Br(),]),

                                html.P("Payload range (Kg):"),
                                # TASK 3: Add a slider to select payload range
                                #dcc.RangeSlider(id='payload-slider',...)
                                html.Div([dcc.RangeSlider(min_payload,max_payload,
                                (max_payload-min_payload)/4,value=[min_payload,max_payload],
                                tooltip={"placement": "bottom", "always_visible": True},
                                id='payload-slider'),
                                html.Br(),
                                ]),
                                # TASK 4: Add a scatter chart to show the correlation between payload and launch success
                                html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                                ])

# TASK 2:
# Add a callback function for `site-dropdown` as input, `success-pie-chart` as output
@app.callback(
            Output(component_id='success-pie-chart',component_property='figure'),
            Input(component_id='site-dropdown',component_property='value')
)

def get_pie_chart(entered_site):
    
    if entered_site == 'ALL':
        df_c_l=spacex_df.groupby(["Launch Site","class"])["Flight Number"].count()
        df_c_l=df_c_l.reset_index()
        success_CCLC=df_c_l.iloc[1,2]
        success_CCSLC=df_c_l.iloc[3,2]
        success_KSC=df_c_l.iloc[5,2]
        success_VAFB=df_c_l.iloc[7,2]
        success_rate_CCLC=(success_CCLC/(success_VAFB+success_KSC+success_CCSLC+success_CCLC))*100
        success_rate_CCSLC=(success_CCSLC/(success_VAFB+success_KSC+success_CCSLC+success_CCLC))*100
        success_rate_KSC=(success_KSC/(success_VAFB+success_KSC+success_CCSLC+success_CCLC))*100
        success_rate_VAFB=(success_VAFB/(success_VAFB+success_KSC+success_CCSLC+success_CCLC))*100

        df_ALL=pd.DataFrame({"Launch Site":['CCAFS LC-40', 'VAFB SLC-4E', 'KSC LC-39A', 'CCAFS SLC-40'],
                     "Success Rate":[success_rate_CCLC,success_rate_VAFB,success_rate_KSC,success_rate_CCSLC]})
        fig=px.pie(df_ALL,values='Success Rate',names='Launch Site',title='Success rate for all sites')
        return fig
    else:
        df=spacex_df[spacex_df["Launch Site"]==entered_site]
        line_data=df.groupby("class")["Launch Site"].count()
        fail=line_data[0]/(line_data[1]+line_data[0])*100
        success=line_data[1]/(line_data[1]+line_data[0])*100
        #dfsf=pd.DataFrame({"Launch Site":entered_site,"Fail":fail,"Success":success},index=[0])
   
        fig=px.pie(values=[fail,success],names=["Fail","Success"],title="Rate for "+str(entered_site))
        return fig
# TASK 4:
# Add a callback function for `site-dropdown` and `payload-slider` as inputs, `success-payload-scatter-chart` as output
@app.callback(
    Output(component_id='success-payload-scatter-chart',component_property='figure'),
    Input(component_id='site-dropdown',component_property='value'),
    Input(component_id='payload-slider',component_property='value'),
)
def get_scatter_graph(entered_site,payload_mass):
    payload_min=payload_mass[0]
    payload_max=payload_mass[1]
    if entered_site == 'ALL':
        df_s=spacex_df[(spacex_df["Payload Mass (kg)"]>=payload_min) & (spacex_df["Payload Mass (kg)"]<=payload_max)]
        fig=px.scatter(data_frame=df_s,x='Payload Mass (kg)',y='class',color='Booster Version Category')
        return fig
    else:
        df_s=spacex_df[(spacex_df["Payload Mass (kg)"]>=payload_min) & (spacex_df["Payload Mass (kg)"]<=payload_max) & 
               (spacex_df["Launch Site"]==entered_site)]
        fig=px.scatter(data_frame=df_s,x='Payload Mass (kg)',y='class',color='Booster Version Category')
        return fig   
# Run the app
if __name__ == '__main__':
    app.run_server()
